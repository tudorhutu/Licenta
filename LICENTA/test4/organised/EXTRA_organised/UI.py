# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'file.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from asyncio.windows_events import NULL
from glob import glob
from html import entities
from re import sub
from unittest.main import MAIN_EXAMPLES
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QDesktopServices
from PyQt5.QtCore import QObject, QThread, pyqtSignal,QUrl
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import sys
import os
from flowers_detection import *
from flowers_model import *
from scraper import *
selected_folder = ""
search_term=""
image_to_download=""
current_file_path = os.path.realpath(__file__ + '/..')
classsified_photo_folder = os.path.join(current_file_path,"classified")
if not os.path.exists(classsified_photo_folder):
    os.mkdir(classsified_photo_folder)
class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)

    def run(self):
        photo_dict = dict()
        global selected_folder
        i = 0
        j = 0

        for sub_dir in os.listdir(data_dir):
            newpath = os.path.join(classsified_photo_folder,sub_dir)
            if not os.path.exists(newpath):
                os.mkdir(newpath)
        for sub_dir in os.listdir(selected_folder):
            i+=1
        for sub_dir in os.listdir(selected_folder):
            j+=1
            self.progress.emit(100 * float(j)/float(i))
            # print(pretdict(os.path.join(selected_folder, sub_dir)))
            predict_key = pretdict(os.path.join(selected_folder, sub_dir))
            if predict_key not in photo_dict.keys():
                photo_dict[predict_key]= []
            photo_dict[predict_key].append(os.path.join(selected_folder, sub_dir))  
        for key in photo_dict.keys():
            path_to_move = os.path.join(classsified_photo_folder,key)
            for photo in photo_dict[key]:
                photo_name = os.path.basename(photo)
                shutil.copy(photo, os.path.join(path_to_move,photo_name))
        self.finished.emit()
class Worker2(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)
    def run_2(self):
        global search_term
        imagescrape(search_term)
        length_equalizer()
        search_term=""
        self.finished.emit()

class Worker3(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)
    def run_3(self):
        fit_model()
        self.finished.emit()

class Worker4(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(int)
    def run_4(self):
        global image_to_download
        downloaded_path = tf.keras.utils.get_file(origin=image_to_download)
        predict_key = pretdict(downloaded_path)
        path_to_move = os.path.join(classsified_photo_folder,predict_key)
        photo_name = os.path.basename(downloaded_path)
        shutil.move(downloaded_path, os.path.join(path_to_move,photo_name))
        self.finished.emit()


class Ui_MainWindow(object):

    def folder_browser(self):
        global selected_folder
        dialog = QFileDialog()
        folder_path = dialog.getExistingDirectory(None, "Select Folder")
        selected_folder = folder_path

    def runLongTask(self):
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = Worker()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.onCountChanged)
        # Step 6: Start the thread
        self.thread.start()

        self.pushButton_2.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.pushButton_2.setEnabled(True)
        )

    def update_list(self):
        for sub_dir in os.listdir(data_dir):
            self.entries.append(sub_dir)  
        model = QtGui.QStandardItemModel()
        self.listView.setModel(model)

        for i in self.entries:
            item = QtGui.QStandardItem(i)
            model.appendRow(item)

    def runLongTask_2(self):
        # Step 2: Create a QThread object
        self.thread2 = QThread()
        # Step 3: Create a worker object
        self.worker = Worker2()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread2)
        # Step 5: Connect signals and slots
        self.thread2.started.connect(self.worker.run_2)
        self.worker.finished.connect(self.thread2.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread2.finished.connect(self.thread2.deleteLater)
        # Step 6: Start the thread
        self.thread2.start()

        self.pushButton_5.setEnabled(False)
        self.pushButton_5.setText("Downloading...")
        self.thread2.finished.connect(
            lambda: self.pushButton_5.setEnabled(True)
        )
        self.thread2.finished.connect(self.update_list)
        self.thread2.finished.connect(
            lambda: self.pushButton_5.setText("Download new category")
        )

    def runLongTask_3(self):
        # Step 2: Create a QThread object
        self.thread3 = QThread()
        # Step 3: Create a worker object
        self.worker = Worker3()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread3)
        # Step 5: Connect signals and slots
        self.thread3.started.connect(self.worker.run_3)
        self.worker.finished.connect(self.thread3.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread3.finished.connect(self.thread3.deleteLater)
        # Step 6: Start the thread
        self.thread3.start()

        self.pushButton_4.setEnabled(False)
        self.pushButton_4.setText("Training...")
        self.thread3.finished.connect(
            lambda: self.pushButton_4.setEnabled(True)
        )
        self.thread3.finished.connect(
            lambda: self.pushButton_4.setText("Re-train model")
        )

    def runLongTask_4(self):
        # Step 2: Create a QThread object
        self.thread4 = QThread()
        # Step 3: Create a worker object
        self.worker = Worker4()
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread4)
        # Step 5: Connect signals and slots
        self.thread4.started.connect(self.worker.run_4)
        self.worker.finished.connect(self.thread4.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread4.finished.connect(self.thread4.deleteLater)
        # Step 6: Start the thread
        self.thread4.start()

        self.pushButton_3.setEnabled(False)
        self.pushButton_3.setText("Please wait")
        self.thread4.finished.connect(
            lambda: self.pushButton_3.setEnabled(True)
        )
        self.thread4.finished.connect(
            lambda: self.pushButton_3.setText("Download and classify Image")
        )      


    def classify_images(self):
        global selected_folder
        is_valid = True
        nrfiles = 0
        if(selected_folder == ""):
            msg = QMessageBox()
            msg.setWindowTitle("Warning!")
            msg.setText("No folder selcted!")
            msg.setIcon(QMessageBox.Critical)
            x = msg.exec_()
        else:
            for sub_dir in os.listdir(selected_folder):
                nrfiles += 1
                if(os.path.splitext(sub_dir)[-1] != ".png" and os.path.splitext(sub_dir)[-1] != ".jpg"):
                    is_valid = False
            if nrfiles == 0:
                is_valid = False
            if(is_valid == False):
                msg = QMessageBox()
                msg.setWindowTitle("Warning!")
                msg.setText(
                    "Invalid folder! A valid folder has .jpg and .png files only.")
                msg.setIcon(QMessageBox.Warning)
                x = msg.exec_()
            else:
                Ui_MainWindow.runLongTask(self)

    def test(self):
        print("alai")

    def onCountChanged(self, value):
        self.progress.setValue(value)

    entries = []

    def setupUi(self, MainWindow):
        global data_dir

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(647, 419)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 10, 621, 201))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        # select folder button
        self.pushButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.folder_browser)
        self.gridLayout.addWidget(self.pushButton, 0, 0, 1, 1)

        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        self.lineEdit.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setPlaceholderText("Paste here the URL of the image you want to download") 
        self.lineEdit.setText("")   
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 2, 0, 1, 1)

    
        self.line = QtWidgets.QFrame(self.gridLayoutWidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 1, 0, 1, 1)

        # download image button
        self.pushButton_3 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.download_and_classify)
        self.gridLayout.addWidget(self.pushButton_3, 3, 0, 1, 1)

        # classify button
        self.pushButton_2 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.classify_images)
        self.gridLayout.addWidget(self.pushButton_2, 0, 1, 1, 1)

        # open folder button
        self.pushButton_6 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.open_folder)
        self.gridLayout.addWidget(self.pushButton_6, 1, 1, 1, 1)

        self.lineEdit_2 = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.lineEdit_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_2.setSizePolicy(sizePolicy)
        self.lineEdit_2.setText("")   
        self.lineEdit_2.setPlaceholderText("Write the name of the new category(e.g.: dogs)") 
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 2, 1, 1, 1)


        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        #new category button
        self.pushButton_5 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.download_new_category)
        self.horizontalLayout.addWidget(self.pushButton_5)

        self.line_3 = QtWidgets.QFrame(self.gridLayoutWidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.horizontalLayout.addWidget(self.line_3)

        #re-train model button
        self.pushButton_4 = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.re_train_model)
        self.horizontalLayout.addWidget(self.pushButton_4)

        self.gridLayout.addLayout(self.horizontalLayout, 3, 1, 1, 1)


        self.progress = QtWidgets.QProgressBar(self.centralwidget)
        self.progress.setObjectName("progress_bar")
        self.progress.setGeometry(0, 0, 300, 25)
        self.progress.setMaximum(100)
        self.gridLayout.addWidget(self.progress, 4, 0, 1, 0)


        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(10, 220, 621, 171))
        self.listView.setObjectName("listView")
        
        for sub_dir in os.listdir(data_dir):
            self.entries.append(sub_dir)  
        model = QtGui.QStandardItemModel()
        self.listView.setModel(model)

        for i in self.entries:
            item = QtGui.QStandardItem(i)
            model.appendRow(item)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionLocal_folder = QtWidgets.QAction(MainWindow)
        self.actionLocal_folder.setObjectName("actionLocal_folder")
        self.actionOnline_File = QtWidgets.QAction(MainWindow)
        self.actionOnline_File.setObjectName("actionOnline_File")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Tomi"))
        MainWindow.setFixedSize(640, 420)
        MainWindow.setWindowIcon(QtGui.QIcon('logo.png'))
        self.pushButton.setText(_translate("MainWindow", "Select Folder"))
        self.pushButton_3.setText(_translate("MainWindow", "Download and classify Image"))
        self.pushButton_2.setText(_translate("MainWindow", "Classify"))
        self.pushButton_5.setText(_translate(
            "MainWindow", "Download new category"))
        self.pushButton_6.setText(_translate(
            "MainWindow", "Open classified folder"))
        self.pushButton_4.setText(_translate("MainWindow", "Re-train model"))
        self.actionLocal_folder.setText(
            _translate("MainWindow", "Local folder..."))
        self.actionOnline_File.setText(_translate("MainWindow", "Online File"))

    def open_folder(self):
        dirPath = classsified_photo_folder
        QDesktopServices.openUrl(QUrl.fromLocalFile(dirPath))

    def download_new_category(self):
        global search_term
        if self.lineEdit_2.text()=="":
            msg = QMessageBox()
            msg.setWindowTitle("Warning!")
            msg.setText("You must enter a category before downloading")
            msg.setIcon(QMessageBox.Warning)
            x = msg.exec_()
        else:
            exists = False
            search_term = self.lineEdit_2.text()
            for sub_dir in os.listdir(data_dir):
                if(search_term==sub_dir):
                    exists=True
            if(exists==True):
                msg = QMessageBox()
                msg.setWindowTitle("Warning!")
                msg.setText("Category already exists!")
                msg.setIcon(QMessageBox.Warning)
                x = msg.exec_()
            else:
                Ui_MainWindow.runLongTask_2(self)
    
    def re_train_model(self):
        if len(class_names)==len(self.entries):
            msg = QMessageBox()
            msg.setWindowTitle("Warning!")
            msg.setText("You need a new category to re-train!")
            msg.setIcon(QMessageBox.Warning)
            x = msg.exec_()
        else:
            Ui_MainWindow.runLongTask_3(self)
    
    def download_and_classify(self):
        global image_to_download
        if self.lineEdit.text()=="":
            msg = QMessageBox()
            msg.setWindowTitle("Warning!")
            msg.setText("You must enter an URL before downloading")
            msg.setIcon(QMessageBox.Warning)
            x = msg.exec_()
        else:
            image_to_download = self.lineEdit.text()
            Ui_MainWindow.runLongTask_4(self)
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
